<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/08/03/job-zi-yuan-dui-xiang/"/>
      <url>/2020/08/03/job-zi-yuan-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="Job资源对象"><a href="#Job资源对象" class="headerlink" title="Job资源对象"></a>Job资源对象</h2><p>服务类的Pod容器：RC、RS、DS、Deployment.</p><p>工作类的Pod容器：Job—&gt;执行一次，或者批量执行处理程序，完成之后推出容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># cat job.yaml </span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-job</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-job</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;hello k8s job!&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># kubectl get pod</span></span><br><span class="line"><span class="string">NAME</span>             <span class="string">READY</span>   <span class="string">STATUS</span>      <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">test-job-qgc6p</span>   <span class="number">0</span><span class="string">/1</span>     <span class="string">Completed</span>   <span class="number">0</span>          <span class="string">55s</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># kubectl logs test-job-qgc6p </span></span><br><span class="line"><span class="string">hello</span> <span class="string">k8s</span> <span class="string">job!</span></span><br></pre></td></tr></table></figure><p>PS：注意，如果容器内执行任务有误，会根据容器的重启策略操作容器，不过这里的容器重启策略只能是：Never、OnFailure</p><p><strong>提高Job的执行效率</strong></p><p>我们可以在Job.spec字段下加上<strong>parallelism</strong>选项。表示同时运行多少个Pod执行任务</p><p>我们可以在Job.spec字段下加上<strong>completions</strong>选项。表示总共需要完成Pod的数量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># cat job.yaml </span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-job</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">completions:</span> <span class="number">8</span>     <span class="string">//总共需要完成多少个Pod</span></span><br><span class="line">  <span class="attr">parallelism:</span> <span class="number">2</span>     <span class="string">//同时运行几个pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-job</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;hello k8s job!&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure><h5 id="如何定时执行Job"><a href="#如何定时执行Job" class="headerlink" title="如何定时执行Job"></a>如何定时执行Job</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">kind: CronJob</span><br><span class="line">apiVersion: batch&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: hello</span><br><span class="line">spec:</span><br><span class="line">  schedule: &quot;*&#x2F;1 * * * *&quot;</span><br><span class="line">  jobTemplate:</span><br><span class="line">    spec:</span><br><span class="line">      template:</span><br><span class="line">        spec:</span><br><span class="line">          containers:</span><br><span class="line">          - name: hello</span><br><span class="line">            image: busybox</span><br><span class="line">            command: [&quot;echo&quot;,&quot;hello cronjob!&quot;]</span><br><span class="line">          restartPolicy: OnFailure</span><br><span class="line">[root@master ~]# kubectl apply -f cronjob.yaml</span><br><span class="line">[root@master ~]# kubectl get cronjobs.batch </span><br><span class="line">NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hello   *&#x2F;1 * * * *   False     0        47s             51s</span><br><span class="line">[root@master ~]# kubectl logs hello-1579053480-vpm6t </span><br><span class="line">hello cronjob!</span><br></pre></td></tr></table></figure><p>此时查看Pod的状态，会发现，每分钟都会运行一个新的Pod来执行命令规定的任务。</p><p>练习：</p><p>​    规定2020年1月15号上午十点五分运行上面的crontab任务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># cat cronjob.yaml </span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;5 10 15 1 3&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">            <span class="attr">command:</span> [<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;hello cronjob!&quot;</span>]</span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure><p>这时会发现，如果规定具体时间，可能并不会执行任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl api-versions    &#x2F;&#x2F;查看api版本</span><br></pre></td></tr></table></figure><p><strong>添加apiVersion库。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml </span><br><span class="line">&#x2F;&#x2F;在yaml文件中添加</span><br><span class="line">- --runtime-config&#x3D;batch&#x2F;v2alpha1&#x3D;true</span><br></pre></td></tr></table></figure><p><img src="C:\Users\12165\AppData\Roaming\Typora\typora-user-images\image-20200115104327734.png" alt="image-20200115104327734"></p><p>然后重启kubelet服务，重新识别api yaml文件内容即可。</p><p>//查看api版本库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl api-versions </span><br></pre></td></tr></table></figure><p>PS：注意，此时任然不能正常运行指定时间的job，这时因为k8s官方在cronjob这个资源对象的支持中还没有完善此功能。还待开发。</p><p>跟job资源一样在cronjob.spec.jobTemplate.spec下同样支持并发Job参数：<strong>parallelism</strong>，也支持完成Pod的总数参数：<strong>completions</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/03/helm-zi-ding-yi-mo-ban/"/>
      <url>/2020/08/03/helm-zi-ding-yi-mo-ban/</url>
      
        <content type="html"><![CDATA[<h3 id="Helm"><a href="#Helm" class="headerlink" title="Helm"></a>Helm</h3><p>charts：包、relieases：实例。</p><h5 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h5><h6 id="开发自己的chart"><a href="#开发自己的chart" class="headerlink" title="开发自己的chart"></a>开发自己的chart</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm create mychart</span><br></pre></td></tr></table></figure><p>调试chart</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm install --dry-run --debug mychart</span><br></pre></td></tr></table></figure><p>安装chart</p><p>1、通过仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm search redis</span><br><span class="line">[root@master ~]# helm fetch stable&#x2F;redis</span><br></pre></td></tr></table></figure><p>2、通过tar包安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm install .&#x2F;redis-1.1.15.tgz</span><br></pre></td></tr></table></figure><p>3、通过chart本地目录安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm install .&#x2F;redis</span><br></pre></td></tr></table></figure><p>4、通过URL安装</p><p>使用本地目录安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master mychart]# vim values.yaml </span><br><span class="line">[root@master mychart]# helm install -n test ..&#x2F;mychart&#x2F;</span><br><span class="line">&#x2F;&#x2F;修改</span><br><span class="line">replicaCount: 3</span><br><span class="line">service:</span><br><span class="line">  type: NodePort     &#x2F;&#x2F;添加</span><br><span class="line">  port: 80</span><br><span class="line">  nodePort: 31033    &#x2F;&#x2F;添加</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;升级</span><br><span class="line">[root@master ~]# helm upgrade test mychart&#x2F; -f mychart&#x2F;values.yaml </span><br></pre></td></tr></table></figure><p>使用mychart部署一个实例：bdqn。使用镜像为私有镜像v1版本</p><p>完成之后，镜像版本</p><p>全部成功之后，将实例做一个升级，将镜像改为v2版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># vim mychart/values.yaml </span></span><br><span class="line"><span class="string">修改</span></span><br><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span><span class="string">:5000/httpd</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># helm install -n bdqn mychart/</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># kubectl get deployments. -o wide</span></span><br><span class="line"><span class="string">NAME</span>                   <span class="string">READY</span>   <span class="string">UP-TO-DATE</span>   <span class="string">AVAILABLE</span>   <span class="string">AGE</span>   <span class="string">CONTAINERS</span>             <span class="string">IMAGES</span>             </span><br><span class="line"><span class="string">bdqn-mychart</span>           <span class="number">0</span><span class="string">/1</span>     <span class="number">1</span>            <span class="number">0</span>           <span class="string">11s</span>   <span class="string">mychart</span>                <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span><span class="string">:5000/httpd:v1</span>   <span class="string">app.kubernetes.io/instance=bdqn,app.kubernetes.io/name=mychart</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># kubectl get pod</span></span><br><span class="line"><span class="string">NAME</span>                                    <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">bdqn-mychart-7dbf44cfd5-xg8hw</span>           <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">23s</span></span><br><span class="line"></span><br><span class="line"><span class="string">//升级</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># vim mychart/values.yaml </span></span><br><span class="line"><span class="string">//修改</span></span><br><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span><span class="string">:5000/httpd</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># helm upgrade bdqn mychart/ -f mychart/values.yaml </span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># kubectl get deployments. -o wide</span></span><br><span class="line"><span class="string">NAME</span>                   <span class="string">READY</span>   <span class="string">UP-TO-DATE</span>   <span class="string">AVAILABLE</span>   <span class="string">AGE</span>   <span class="string">CONTAINERS</span>             <span class="string">IMAGES</span>                       <span class="string">SELECTOR</span></span><br><span class="line"><span class="string">bdqn-mychart</span>           <span class="number">1</span><span class="string">/1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="string">68s</span>   <span class="string">mychart</span>                <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span><span class="string">:5000/httpd:v2</span>   <span class="string">app.kubernetes.io/instance=bdqn,app.kubernetes.io/name=mychart</span></span><br></pre></td></tr></table></figure><h6 id="创建自己的Repo仓库。"><a href="#创建自己的Repo仓库。" class="headerlink" title="创建自己的Repo仓库。"></a>创建自己的Repo仓库。</h6><p>1、在node1上启动一个httpd容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# mkdir &#x2F;var&#x2F;www</span><br><span class="line">[root@node1 ~]# docker run -d -p 8080:8080 -v &#x2F;var&#x2F;www&#x2F;:&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs httpd</span><br></pre></td></tr></table></figure><p>2、master节点上，将mychart目录打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# helm package mychart&#x2F;</span><br></pre></td></tr></table></figure><p>3、生产仓库的index文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mkdir myrepo</span><br><span class="line">[root@master ~]# mv mychart-0.1.0.tgz myrepo&#x2F;</span><br><span class="line">[root@master ~]# ls myrepo&#x2F;</span><br><span class="line">mychart-0.1.0.tgz</span><br><span class="line">[root@master ~]# helm repo  index myrepo&#x2F; --url http:&#x2F;&#x2F;192.168.1.12:8080&#x2F;charts</span><br></pre></td></tr></table></figure><p>4、将生成的tar包和index.yaml上传到node1的/var/www/charts目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# mkdir  &#x2F;var&#x2F;www&#x2F;charts</span><br><span class="line">[root@master ~]# cd myrepo&#x2F;</span><br><span class="line">[root@master myrepo]# ls</span><br><span class="line">index.yaml  mychart-0.1.0.tgz</span><br><span class="line">[root@master myrepo]# scp index.yaml mychart-0.1.0.tgz node1:&#x2F;var&#x2F;www&#x2F;charts</span><br></pre></td></tr></table></figure><p>5、添加新的repo仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master myrepo]# helm repo add dyzrepo http:&#x2F;&#x2F;192.168.1.12:8080&#x2F;charts</span><br><span class="line">&quot;dyzrepo&quot; has been added to your repositories</span><br></pre></td></tr></table></figure><p>6、我们就可以直接使用新的repo仓库部署实例了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master myrepo]# helm install newrepo&#x2F;mychart -n test</span><br></pre></td></tr></table></figure><p>7、如果以后仓库中新添加了chart包，需要helm repo list</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/03/doshboard/"/>
      <url>/2020/08/03/doshboard/</url>
      
        <content type="html"><![CDATA[<h3 id="一、k8s的UI访问界面-dashboard"><a href="#一、k8s的UI访问界面-dashboard" class="headerlink" title="一、k8s的UI访问界面-dashboard"></a>一、k8s的UI访问界面-dashboard</h3><p>在dashboard中，虽然可以做到创建，删除，修改资源等操作，但通常情况下，我们会把它当作健康k8s集群的软件。</p><p>1、到github上搜索dashboard</p><h5 id="基于token的方法登录dashboard"><a href="#基于token的方法登录dashboard" class="headerlink" title="基于token的方法登录dashboard"></a>基于token的方法登录dashboard</h5><p>1、创建一个dashboard的管理用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line"></span><br><span class="line">serviceaccount&#x2F;dashboard-admin created</span><br></pre></td></tr></table></figure><p>2、绑定用户为集群管理用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master dashboard]# kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole&#x3D;cluster-admin --serviceaccount&#x3D;kube-system:dashboard-admin</span><br><span class="line"></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;dashboard-cluster-admin created</span><br></pre></td></tr></table></figure><p>3、获取token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;得到token的名称</span><br><span class="line">[root@master dashboard]# kubectl get secrets -n kube-system | grep dashboard-admin            </span><br><span class="line">dashboard-admin-token-kz6tw                      kubernetes.io&#x2F;service-account-token   3      5m8s</span><br><span class="line">[root@master dashboard]# kubectl get secrets -n kube-system dashboard-admin-token-kz6tw </span><br><span class="line">NAME                          TYPE                                  DATA   AGE</span><br><span class="line">dashboard-admin-token-kz6tw   kubernetes.io&#x2F;service-account-token   3      7m10s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看上述得到的secret资源的详细信息，会得到token</span><br><span class="line">[root@master dashboard]# kubectl describe secrets -n kube-system dashboard-admin-token-kz6tw   </span><br></pre></td></tr></table></figure><p><img src="C:\Users\12165\AppData\Roaming\Typora\typora-user-images\image-20200226090425791.png" alt="image-20200226090425791"></p><p>4、在浏览器上使用token登录</p><p>PS：如果使用的旧版本的dashboard，使用谷歌浏览器登陆可能是不成功的，需要换成其他浏览器，比如火狐</p><h5 id="基于kubeconfig配置文件登录kubernetes"><a href="#基于kubeconfig配置文件登录kubernetes" class="headerlink" title="基于kubeconfig配置文件登录kubernetes"></a>基于kubeconfig配置文件登录kubernetes</h5><p>1、获取token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;得到token的名称</span><br><span class="line">[root@master dashboard]# kubectl get secrets -n kube-system | grep dashboard-admin            </span><br><span class="line">dashboard-admin-token-kz6tw                      kubernetes.io&#x2F;service-account-token   3      5m8s</span><br><span class="line">[root@master dashboard]# kubectl get secrets -n kube-system dashboard-admin-token-kz6tw </span><br><span class="line">NAME                          TYPE                                  DATA   AGE</span><br><span class="line">dashboard-admin-token-kz6tw   kubernetes.io&#x2F;service-account-token   3      7m10s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看上述得到的secret资源的详细信息，会得到token</span><br><span class="line">[root@master dashboard]# kubectl describe secrets -n kube-system dashboard-admin-token-kz6tw </span><br></pre></td></tr></table></figure><p>2、生成kubeconfi配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;设置一个环境变量代表获取到的token</span><br><span class="line">[root@master dashboard]# kubectl get secrets -n kube-system dashboard-admin-token-kz6tw -o jsonpath&#x3D;&#123;.data.token&#125; | base64 -d</span><br><span class="line"></span><br><span class="line">[root@master dashboard]# DASH_TOKEN&#x3D;$(kubectl get secrets -n kube-system dashboard-admin-token-kz6tw -o jsonpath&#x3D;&#123;.data.token&#125; | base64 -d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将k8s集群的配置信息写入</span><br><span class="line">[root@master dashboard]# kubectl config set-cluster kubernetes --server&#x3D;192.168.1.11:6443  --kubeconfig&#x3D;&#x2F;root&#x2F;.dashboard-admin.conf</span><br><span class="line"></span><br><span class="line">[root@master dashboard]# kubectl config set-credentials dashboard-admin --token&#x3D;$DASH_TOKEN --kubeconfig&#x3D;&#x2F;root&#x2F;.dashboard-admin.conf</span><br><span class="line"></span><br><span class="line">[root@master dashboard]# kubectl config set-context dashboard-admin@kubernetes --cluster&#x3D;kubernetes --user&#x3D;dashboard-admin --kubeconfig&#x3D;&#x2F;root&#x2F;.dashboard-admin.conf</span><br><span class="line"></span><br><span class="line">[root@master dashboard]# kubectl config use-context dashboard-admin@kubernetes --kubeconfig&#x3D;&#x2F;root&#x2F;.dashboard-admin.conf</span><br></pre></td></tr></table></figure><p>3、将生成的/root/.dashboard-admin.conf的配置文件，导出并做保存。</p><p>4、从浏览器选择kubeconfig的登录方式，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>helm入门</title>
      <link href="/2020/03/21/helm-ru-men/"/>
      <url>/2020/03/21/helm-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="Helm"><a href="#Helm" class="headerlink" title="Helm"></a>Helm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@master helm]# wget https:&#x2F;&#x2F;get.helm.sh&#x2F;helm-v2.14.3-linux-amd64.tar.gz</span><br><span class="line">[root@master helm]# ls</span><br><span class="line">helm-v2.14.3-linux-amd64.tar.gz</span><br><span class="line">[root@master helm]# tar -zxvf helm-v2.14.3-linux-amd64.tar.gz </span><br><span class="line">linux-amd64&#x2F;</span><br><span class="line">linux-amd64&#x2F;helm</span><br><span class="line">linux-amd64&#x2F;README.md</span><br><span class="line">linux-amd64&#x2F;LICENSE</span><br><span class="line">linux-amd64&#x2F;tiller</span><br><span class="line">[root@master helm]# ls</span><br><span class="line">helm-v2.14.3-linux-amd64.tar.gz  linux-amd64</span><br><span class="line">[root@master helm]# mv linux-amd64&#x2F;helm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line">[root@master helm]# chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;helm </span><br><span class="line">[root@master helm]# helm help</span><br><span class="line">[root@master helm]# source &lt;(helm completion bash)</span><br><span class="line">&#x2F;&#x2F;将yaml文件导入</span><br><span class="line">[root@master helm]# kubectl apply -f tiller-rbac.yaml </span><br><span class="line">serviceaccount&#x2F;tiller created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;tiller created</span><br><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">[root@master helm]# helm init --service-account&#x3D;tiller</span><br><span class="line">&#x2F;&#x2F;添加国内heml仓库源</span><br><span class="line">[root@master helm]# helm repo list </span><br><span class="line">NAME      URL                                             </span><br><span class="line">stable    https:&#x2F;&#x2F;kubernetes-charts.storage.googleapis.com</span><br><span class="line">local     http:&#x2F;&#x2F;127.0.0.1:8879&#x2F;charts  </span><br><span class="line">[root@master helm]# helm repo add stable https:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;charts</span><br><span class="line">&quot;stable&quot; has been added to your repositories</span><br><span class="line">[root@master helm]# helm repo list </span><br><span class="line">NAME      URL                                                   </span><br><span class="line">stable    https:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;charts</span><br><span class="line">local     http:&#x2F;&#x2F;127.0.0.1:8879&#x2F;charts  </span><br><span class="line">[root@master helm]# helm version </span><br><span class="line">Client: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Server: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br></pre></td></tr></table></figure><h5 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h5><p>包管理工具：</p><p>Charts：是一个helm的程序包，它包含了运行一个kubernetes应用程序所需要的镜像，依赖关系和资源定义等。</p><p>Release：应用程序运行Charts字后，得到的一个实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;搜索包</span><br><span class="line">[root@master helm]# helm search </span><br><span class="line">&#x2F;&#x2F;搜索指定包</span><br><span class="line">[root@master helm]# helm search redis</span><br><span class="line">&#x2F;&#x2F;查看包的详细信息</span><br><span class="line">[root@master helm]# helm inspect stable&#x2F;redis</span><br><span class="line">&#x2F;&#x2F;部署一个实例，</span><br><span class="line">[root@master helm]# helm install stable&#x2F;redis -n redis --dry-run</span><br><span class="line">NAME:   redis</span><br><span class="line">    1、关于这个release的描述。</span><br><span class="line">    2、关于这个release资源的描述。</span><br><span class="line">    3、怎么使用这个release。</span><br></pre></td></tr></table></figure><h3 id="helm部署安装一个Mysql服务"><a href="#helm部署安装一个Mysql服务" class="headerlink" title="helm部署安装一个Mysql服务"></a>helm部署安装一个Mysql服务</h3><p>Chart.yaml</p><p>这个chart包的概要信息</p><p>name和version这俩是必填项，其他可选。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master mysql]# pwd</span><br><span class="line">&#x2F;root&#x2F;.helm&#x2F;cache&#x2F;archive&#x2F;mysql</span><br><span class="line">[root@master archive]# helm install stable&#x2F;mysql -n mysql</span><br><span class="line">[root@master archive]# ls</span><br><span class="line">mysql-0.3.5.tgz  redis  redis-1.1.15.tgz</span><br><span class="line">[root@master archive]# tar -zxvf mysql-0.3.5.tgz </span><br></pre></td></tr></table></figure><h5 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h5><p>是这个chart包的一个使用帮助文档</p><h5 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h5><p>chart包内各种资源对象的模板。</p><h5 id="values-yaml"><a href="#values-yaml" class="headerlink" title="values.yaml"></a>values.yaml</h5><p>是这个chart包的默认值，可以</p><h3 id="helm部署安装一个mysql服务"><a href="#helm部署安装一个mysql服务" class="headerlink" title="helm部署安装一个mysql服务"></a>helm部署安装一个mysql服务</h3><p>在部署mysql的时候，如何开启storageclass以及如何使用？</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># yum -y install rpcbind nfs-utils</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># mkdir /data</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># vim /etc/exports</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># cat /etc/exports</span></span><br><span class="line"><span class="string">/data</span>    <span class="string">*(rw,sync,no_root_squash)</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># systemctl start rpcbind</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># systemctl start nfs-server.service </span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># showmount -e </span></span><br><span class="line"><span class="attr">Export list for master:</span></span><br><span class="line"><span class="string">/data</span> <span class="string">*</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># cat /etc/exports</span></span><br><span class="line"><span class="string">/data</span>    <span class="string">*(rw,sync,no_root_squash)</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># cat nfs-pv1.yml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysqlpv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">8Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data/mysqlpv</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># mkdir /data/mysqlpv</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># kubectl apply -f nfs-pv1.yml </span></span><br><span class="line"><span class="string">persistentvolume/mysqlpv</span> <span class="string">created</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">archive</span>]<span class="comment"># kubectl get pv</span></span><br><span class="line"><span class="string">NAME</span>      <span class="string">CAPACITY</span>   <span class="string">ACCESS</span> <span class="string">MODES</span>   <span class="string">RECLAIM</span> <span class="string">POLICY</span>   <span class="string">STATUS</span>      <span class="string">CLAIM</span>   <span class="string">STORAGECLASS</span>   <span class="string">REASON</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">mysqlpv</span>   <span class="string">8Gi</span>        <span class="string">RWO</span>            <span class="string">Recycle</span>          <span class="string">Available</span>                                   <span class="string">2s</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">mysql</span>]<span class="comment"># helm install stable/mysql -n bdqn-mysql  --set mysqlRootPassword=123.com</span></span><br><span class="line"><span class="attr">NAME:</span>   <span class="string">bdqn-mysql</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">mysql</span>]<span class="comment"># kubectl get deployments.</span></span><br><span class="line"><span class="string">NAME</span>               <span class="string">READY</span>   <span class="string">UP-TO-DATE</span>   <span class="string">AVAILABLE</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">bdqn-mysql-mysql</span>   <span class="number">1</span><span class="string">/1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="string">48s</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">mysql</span>]<span class="comment"># kubectl get pod</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">mysql</span>]<span class="comment"># kubectl get pod </span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">mysql</span>]<span class="comment"># kubectl get pv</span></span><br><span class="line">[<span class="string">root@master</span> <span class="string">mysql</span>]<span class="comment"># kubectl exec -it bdqn-mysql-mysql-7b89c7b99-f65x9 -- mysql -u root -p123.com</span></span><br></pre></td></tr></table></figure><p>服务的升级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master mysql]# helm upgrade --set imageTag&#x3D;5.7.15 bdqn-mysql stable&#x2F;mysql</span><br></pre></td></tr></table></figure><p>服务的回滚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看历史版本</span><br><span class="line">[root@master mysql]# helm history bdqn-mysql</span><br><span class="line">&#x2F;&#x2F;指定回滚版本</span><br><span class="line">[root@master mysql]# helm rollback bdqn-mysql 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> helm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/01/02/k8s-jia-gou-ji-ben-ming-ling/"/>
      <url>/2020/01/02/k8s-jia-gou-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>kubectl：k8s是命令行端，用来发送客户的操作指令。</p><p>*API server：是k8s集群的前端接口，各种客户端工具以及k8s的其他组件可以通过他管理k8s集群的各种资源。他提供了HTTP/HTTPS RESTful AIP，即k8s API。</p><p>Scheduler：负责决定将Pod放在哪个Node上运行。在调度时，会充分考虑集群的拓扑结构，当前各个节点的负载情况，以及应对高可用、性能、数据亲和性和需求。</p><p>Controller Manager：负责管理集群的各种资源，保证资源处于预期的状态。他由多种Controller 组成，包括Replication Controller、Endpoins Controller、Namespace Controller、Serviceaccounts Controller等待。</p><p>Etcd：负责保存k8s集群的配置信息和各种资源的状态信息。当数据发生变化时，etcd会快速的通知k8s相关组件。第三方组件，他有可替换方案。Consul、zookeeper</p><p>Pod：k8s集群的最小组成单位。一个Pod内，可以运行一个或多个容器。大多数情况下，一个Pod内只有一个Container容器。</p><p>Flannel：是k8s集群网络方案，可以保证Pod的跨主机通信。第三方解决方案，也有替换方案。</p><p>Kubelet：他是Node的agent（代理），当Scheduler确定某个Node上运行Pod之后，会将Pod的具体配置信息发送给该节点的Kubelet，kubelet会根据这些信息创建和运行容器，并向Master报告运行状态。</p><p>kube-proxy：负责将访问service的TCP/UPD数据流转发到后端的容器。如果有多个副本，kube-proxy会实现负载均衡。</p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>运行一个例子：</p><p>//创建一个deployment资源对象。Pod控制器</p><p>[root@master ~]# kubectl run test-web –image=httpd –replicas=2</p><p>分析各个组件的作用以及架构工作流程：</p><p>1）kubectl发送部署请求到API server</p><p>2）APIserver通知Controller Manager创建一个Deployment资源。</p><p>3）Scheduler执行调度任务，将两个副本Pod分发到node1和node2上。</p><p>4）node1和node2上的kubelet在各自节点上创建并运行Pod。</p><p>补充：</p><p>​    1、应用的配置和当前的状态信息保存在etcd中，执行kubectl get pod 时API server会从etcd中读取这些数据。</p><p>​    2、flannel会为每个Pod分配一个IP。但此时没有创建Service资源，目前kube-proxy还没有参与进来。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
