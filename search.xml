<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/08/21/kreplicaset-daemonset/"/>
      <url>/2020/08/21/kreplicaset-daemonset/</url>
      
        <content type="html"><![CDATA[<h2 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h2><p>RC：ReplicationController（老一代的Pod控制器）</p><p>RS：用于确保由其管控的Pod对象副本数量，能够满足用户期望，多则删除，少则通过模板创建。</p><p>特点：</p><ul><li>​    确保Pod资源的对象的数量精准</li><li>​    确保Pod健康运行</li><li>​    弹性伸缩</li></ul><p>同样，它也可以通过yaml或json格式的资源清单来创建。其中spec字段一般嵌套以下字段</p><ul><li>​    <strong>replicas：</strong>期望的Pod对象副本数量</li><li>​    <strong>selector：</strong>当前控制器匹配Pod对象副本的标签选择器</li><li>​    <strong>template：</strong>Pod副本的模板</li></ul><p>与RC相比而言，RS不仅支持基于<strong>等值的标签选择器</strong>，而且还支持<strong>基于集合</strong>的标签选择器。</p><p><strong>标签：</strong>解决同类型的资源对象越来越多，为了更好的管理，按照标签分组。</p><p>常用标签分类：</p><ul><li>​    release（版本）：stable（稳定版）、canary（金丝雀版本）、beta（测试版）</li><li>​    environment（环境变量）：dev（开发）、qa（测试）、production（生产）</li><li>​    application（应用）：ui、as（application software应用软件）、pc、sc</li><li>​    tier（架构层级）：frontend（前端）、backend（后端）、cache（缓存）</li><li>​    partition（分区）：customerA（客户A）、customerB（客户B）</li><li>​    track（品控级别）：daily（每天）、weekly（每周）</li></ul><p>标签要做到：见名知意。</p><p>//通过–show-labels显示资源对象的标签。</p><p>//通过-l 查看仅包含某个标签的资源，</p><p>//给Pod资源添加标签</p><p>[root@master ~]# kubectl label pod labels  app=pc</p><p>//删除标签</p><p>[root@master ~]# kubectl label pod labels  app-</p><p>//修改标签</p><p>[root@master ~]# kubectl label pod labels env=dev –overwrite </p><p>//查看标签</p><p>[root@master ~]# kubectl get pod -l tier –show-labels </p><p>如果标签有多个，标签选择器选择其中一个，也可以关联成功。相反，如果选择器有多个，呢么标签必须完全满足条件。才可以关联成功！</p><p><strong>标签选择器：</strong>标签的查询过滤条件。</p><p>​    <strong>基于等值关系的（equality-based）：</strong>“=”，“==”，“！=”前边两个都是相等，最后是不等。</p><p>​    <strong>基于集合关系（set-based）：</strong>in、notin、exists三种。</p><p>例子：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">selector</span><span class="token punctuation">:</span>  <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> &amp;<span class="token comment" spellcheck="true">#123;key: name,operator: In,values: [zhangsan,lisi]&amp;#125;</span>    <span class="token punctuation">-</span> &amp;<span class="token comment" spellcheck="true">#123;key: age,operator: Exists,values:&amp;#125;</span></code></pre><p>matchLabels：指定键值对表示的标签选择器。</p><p>matchExpressions：基于表达式来指定的标签选择器。选择器列表间为“逻辑与”关系：使用in或者Notin操作时，其values不强制要求为非空的字符串列表，而使用Exists或DostNotExist时，其values必须为空。</p><p><img src="C:\Users\12165\AppData\Roaming\Typora\typora-user-images\image-20200114105726131.png" alt="image-20200114105726131"></p><h5 id="使用标签选择器的逻辑："><a href="#使用标签选择器的逻辑：" class="headerlink" title="使用标签选择器的逻辑："></a>使用标签选择器的逻辑：</h5><ul><li>同时指定的多个选择器之间的逻辑关系为“与”操作。</li><li>使用空值的标签选择器意味着每个资源对象都将被选择中。</li><li>空的标签选择器无法选中任务资源。</li></ul><h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><p>使用场景：如果必须将Pod运行在固定的某个或某几个节点，且要优先于其他Pod的启动。通常情况下，默认会每一个节点都会运行，并且只能运行一个Pod。这个情况推荐使用DaemonSet资源对象。</p><p>监控程序：</p><p>日志收集程序：</p><p>运行一个web服务，在每一个节点都运行一个Pod。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat daemonset.yaml </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ds<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ds    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ds        <span class="token key atrule">image</span><span class="token punctuation">:</span> httpd</code></pre><p>RC、RS、Deployment、DaemonSet。Pod控制器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python列表操作</title>
      <link href="/2020/07/21/python-lie-biao-cao-zuo/"/>
      <url>/2020/07/21/python-lie-biao-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h1><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><blockquote><p>定义一个列表<br>names = [‘张三’,’李四’,’王五’,’赵六’,’田七’]<br>zhang_san = names[0]<br>li_si = names[1]<br>wang_wu = names[2]<br>zhao_liu = names[3]<br>tian_qi = names[4]<br>print(zhang_san+” “+li_si+” “+wang_wu)</p></blockquote><blockquote><p>for循环</p><p>for name in names:<br>        print(name)</p></blockquote><blockquote><p>不仅局限为单纯显示，还可以结合别的模块</p><p>names2 = [‘anlen’,’bob’]<br>for name in names2:<br>    print(name.title())</p></blockquote><h5 id="魔法推导式"><a href="#魔法推导式" class="headerlink" title="魔法推导式"></a>魔法推导式</h5><blockquote><p>n = [name for name in names2]</p><p>nums = [num**2 for num in range(1,11)]</p></blockquote><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><h5 id="range-val1-val2-val3"><a href="#range-val1-val2-val3" class="headerlink" title="range(val1,val2,val3):"></a>range(val1,val2,val3):</h5><blockquote><p>参数1：起始值（包含自己）</p><p>参数2：终止值（不包含自己）</p><p>参数3：步长（间隔数）</p></blockquote><blockquote><p>range函数<br>for num in range(1,11):<br>    print(num,end=” “)</p></blockquote><blockquote><p>输出1-10之间的偶数<br>for num in range(2,11,2):<br>    print(num,end=” “)</p></blockquote><blockquote><p>输出1-10之间的奇数<br>for num in range(1,11,2):<br>    print(num,end=” “)</p></blockquote><blockquote><p>输出1-10之间的奇数的平方<br>for num in range(1,11,2):<br>    print(num**2,end=” “)</p></blockquote><h5 id="创建数字列表"><a href="#创建数字列表" class="headerlink" title="创建数字列表"></a>创建数字列表</h5><blockquote><p>numbers = list(range(1,11))<br>print(numbers)</p></blockquote><h5 id="数字列表的简单统计计算"><a href="#数字列表的简单统计计算" class="headerlink" title="数字列表的简单统计计算"></a>数字列表的简单统计计算</h5><h6 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h6><blockquote><p>max()</p></blockquote><h6 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h6><blockquote><p>min()</p></blockquote><h6 id="总和"><a href="#总和" class="headerlink" title="总和"></a>总和</h6><blockquote><p>sum()</p></blockquote><blockquote><p>列表的最大值、最小值、总和<br>print(max(numbers))<br>print(min(numbers))<br>print(sum(numbers))</p></blockquote><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python布尔表达式</title>
      <link href="/2020/07/21/python-bu-er-biao-da-shi/"/>
      <url>/2020/07/21/python-bu-er-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="条件测试—-布尔表达式"><a href="#条件测试—-布尔表达式" class="headerlink" title="条件测试—-布尔表达式"></a>条件测试—-布尔表达式</h3><h5 id="条件测试案例"><a href="#条件测试案例" class="headerlink" title="条件测试案例"></a>条件测试案例</h5><blockquote><p>条件测试案例</p><p>算术运算符在条件表达式中的应用：ATM/客服</p><p>key = 1<br>if key == 1:<br>    print(‘cunkuan’)<br>else:<br>    print(‘qukuan’)</p></blockquote><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符<img src="C:\Users\12165\AppData\Roaming\Typora\typora-user-images\image-20200313112518352.png" alt="image-20200313112518352"></h5><blockquote><p>//!=<br>if key!=1:<br>    print(“不存款”)<br>else:<br>    print(“存款”)</p></blockquote><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><blockquote><p>and</p><p>or</p></blockquote><h5 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h5><blockquote><p>in</p><p>not in</p></blockquote><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>if语句结构</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python变量和简单的数据类型</title>
      <link href="/2020/07/21/python-bian-liang-he-jian-dan-de-shu-ju-lei-xing/"/>
      <url>/2020/07/21/python-bian-liang-he-jian-dan-de-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="C:\Users\12165\AppData\Roaming\Typora\typora-user-images\image-20200310112113148.png" alt="image-20200310112113148"></p><h3 id="安装ipython"><a href="#安装ipython" class="headerlink" title="安装ipython"></a>安装ipython</h3><p>查看当前库里有什么东西</p><pre><code>C:\Users\12165&gt;pip3 listPackage    Version---------- -------pip        19.2.3setuptools 41.2.0WARNING: You are using pip version 19.2.3, however version 20.0.2 is available.You should consider upgrading via the &#39;python -m pip install --upgrade pip&#39; command.//当提示&#39;python -m pip install --upgrade pip&#39;复制命令执行更新pipC:\Users\12165&gt;python -m pip install --upgrade pipCollecting pip  Downloading https://files.pythonhosted.org/packages/54/0c/d01aa759fdc501a58f431eb594a17495f15b88da142ce14b5845662c13f3/pip-20.0.2-py2.py3-none-any.whl (1.4MB)     |███████████████████████         | 1.0MB 9.7kB/s eta 0:00:42//或者执行该命令python -m pip install --upgrade pip -i https://pypi.douban.com/simple</code></pre><p>下载ipython</p><pre><code>//下载ipythonC:\Users\12165&gt;pip3 install ipythonCollecting ipython  Downloading ipython-7.13.0-py3-none-any.whl (780 kB)     |█████████                       | 225 kB 7.6 kB/s eta 0:01:14 </code></pre><h3 id="使用ipython"><a href="#使用ipython" class="headerlink" title="使用ipython"></a>使用ipython</h3><p>进入ipython</p><pre><code>C:\Users\12165&gt;ipython//退出ipythonIn [1]:exit                                                       </code></pre><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><pre><code>C:\Users\12165&gt;pip3 install -i https://pypi.douban.com/simple/ jupyter//或者C:\Users\12165&gt;pip3 install jupyter</code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre><code>//启用C:\Users\12165&gt;jupyter notebook基于浏览器进行编辑</code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h5 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h5><p><em>只能包含的：字母、数字、下划线，但是不能以数字开头</em></p><p><em>不能包含空格，但是可以用下划线分割其中的单词</em></p><p><em>不能使用python关键字和函数的名称用做变量</em>：</p><blockquote><pre><code>比如：import、class、return、and、def、from...</code></pre></blockquote><p><em>变量名应该简短并且见名知意</em></p><p><em>慎用小写字母i和大写字母O</em></p><h5 id="使用变量的常见错误"><a href="#使用变量的常见错误" class="headerlink" title="使用变量的常见错误"></a>使用变量的常见错误</h5><p><em>变量未定义就使用</em></p><blockquote><p><strong>print(num)</strong></p><hr><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)&lt;ipython-input-30-55a60ae9504f&gt; in &lt;module&gt;----&gt; 1 print(num)NameError: name &#39;num&#39; is not defined</code></pre></blockquote><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h5 id="表达形式"><a href="#表达形式" class="headerlink" title="表达形式"></a>表达形式</h5><blockquote><p>单引号</p><p>双引号</p><p>三引号</p></blockquote><pre><code>str1 = &#39;hello&#39;str2 = &#39;world&#39;str3 = &#39;&#39;&#39;春眠不觉晓，处处闻啼鸟。夜来风雨声，花落知多少。&#39;&#39;&#39;print(str1)print(str2)print(str3)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReplicaSet，DaemonSet</title>
      <link href="/2020/04/01/k8s-replicaset-daemonset/"/>
      <url>/2020/04/01/k8s-replicaset-daemonset/</url>
      
        <content type="html"><![CDATA[<h2 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h2><p>RC：ReplicationController（老一代的Pod控制器）</p><p>RS：用于确保由其管控的Pod对象副本数量，能够满足用户期望，多则删除，少则通过模板创建。</p><p>特点：</p><ul><li>​    确保Pod资源的对象的数量精准</li><li>​    确保Pod健康运行</li><li>​    弹性伸缩</li></ul><p>同样，它也可以通过yaml或json格式的资源清单来创建。其中spec字段一般嵌套以下字段</p><ul><li>​    <strong>replicas：</strong>期望的Pod对象副本数量</li><li>​    <strong>selector：</strong>当前控制器匹配Pod对象副本的标签选择器</li><li>​    <strong>template：</strong>Pod副本的模板</li></ul><p>与RC相比而言，RS不仅支持基于<strong>等值的标签选择器</strong>，而且还支持<strong>基于集合</strong>的标签选择器。</p><p><strong>标签：</strong>解决同类型的资源对象越来越多，为了更好的管理，按照标签分组。</p><p>常用标签分类：</p><ul><li>​    release（版本）：stable（稳定版）、canary（金丝雀版本）、beta（测试版）</li><li>​    environment（环境变量）：dev（开发）、qa（测试）、production（生产）</li><li>​    application（应用）：ui、as（application software应用软件）、pc、sc</li><li>​    tier（架构层级）：frontend（前端）、backend（后端）、cache（缓存）</li><li>​    partition（分区）：customerA（客户A）、customerB（客户B）</li><li>​    track（品控级别）：daily（每天）、weekly（每周）</li></ul><p>标签要做到：见名知意。</p><p>//通过–show-labels显示资源对象的标签。</p><p>//通过-l 查看仅包含某个标签的资源，</p><p>//给Pod资源添加标签</p><p>[root@master ~]# kubectl label pod labels  app=pc</p><p>//删除标签</p><p>[root@master ~]# kubectl label pod labels  app-</p><p>//修改标签</p><p>[root@master ~]# kubectl label pod labels env=dev –overwrite </p><p>//查看标签</p><p>[root@master ~]# kubectl get pod -l tier –show-labels </p><p>如果标签有多个，标签选择器选择其中一个，也可以关联成功。相反，如果选择器有多个，呢么标签必须完全满足条件。才可以关联成功！</p><p><strong>标签选择器：</strong>标签的查询过滤条件。</p><p>​    <strong>基于等值关系的（equality-based）：</strong>“=”，“==”，“！=”前边两个都是相等，最后是不等。</p><p>​    <strong>基于集合关系（set-based）：</strong>in、notin、exists三种。</p><p>例子：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">selector</span><span class="token punctuation">:</span>  <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> &amp;<span class="token comment" spellcheck="true">#123;key: name,operator: In,values: [zhangsan,lisi]&amp;#125;</span>    <span class="token punctuation">-</span> &amp;<span class="token comment" spellcheck="true">#123;key: age,operator: Exists,values:&amp;#125;</span></code></pre><p>matchLabels：指定键值对表示的标签选择器。</p><p>matchExpressions：基于表达式来指定的标签选择器。选择器列表间为“逻辑与”关系：使用in或者Notin操作时，其values不强制要求为非空的字符串列表，而使用Exists或DostNotExist时，其values必须为空。</p><p><img src="C:\Users\12165\AppData\Roaming\Typora\typora-user-images\image-20200114105726131.png" alt="image-20200114105726131"></p><h5 id="使用标签选择器的逻辑："><a href="#使用标签选择器的逻辑：" class="headerlink" title="使用标签选择器的逻辑："></a>使用标签选择器的逻辑：</h5><ul><li>同时指定的多个选择器之间的逻辑关系为“与”操作。</li><li>使用空值的标签选择器意味着每个资源对象都将被选择中。</li><li>空的标签选择器无法选中任务资源。</li></ul><h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><p>使用场景：如果必须将Pod运行在固定的某个或某几个节点，且要优先于其他Pod的启动。通常情况下，默认会每一个节点都会运行，并且只能运行一个Pod。这个情况推荐使用DaemonSet资源对象。</p><p>监控程序：</p><p>日志收集程序：</p><p>运行一个web服务，在每一个节点都运行一个Pod。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat daemonset.yaml </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ds<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ds    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ds        <span class="token key atrule">image</span><span class="token punctuation">:</span> httpd</code></pre><p>RC、RS、Deployment、DaemonSet。Pod控制器。</p>]]></content>
      
      
      <categories>
          
          <category> 资源对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pod资源对象</title>
      <link href="/2020/03/23/k8s-pod-zi-yuan-dui-xiang/"/>
      <url>/2020/03/23/k8s-pod-zi-yuan-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p>Deployment、Service、Pod是k8s最核心的三个资源对象。</p><p><code>Deployment：</code>最常见的无状态应用的控制器，支持应用的扩缩容、滚动更新等操作。</p><p><code>Service：</code>为弹性变动且存在生命周期的Pod对象提供了一个固定的访问接口，用于服务发现和服务访问。</p><p><code>Pod：</code>是运行容器以及调度的最小单位。同一个Pod可可以同时运行多个容器，这些容器共享NET、UTS、IPC。除此之外还有USER、PID、MNT</p><p><code>ReplicationController：</code>用于确保每个Pod副本在任意时刻都能满足目标数量，简单点来说，它用于保证每个容器或容器组总是运行并且可以访问的：老一代无状态的Pod应用控制器。</p><p><code>ReplicaSet：</code>新一代的无状态的Pod应用控制器，它与RC的不同之处在于支持的标签选择器不同，RC只支持等值选择器，RS还额外支持基于集合的选择器。</p><p><code>StatefulSet：</code>用于管理有状态的持久化应用，如database服务程序，它与Deployment不同之处在于，他会为没一个Pod创建一个独有的持久性标识符，并确保每个Pod之间的顺序性。</p><p>DaemonSet：用于确保每一个节点都运行了某个Pod的一个副本，新增的节点一样会被添加此类Pod，在节点移除时，此类Pod会被回收。</p><p><code>Job：</code>用于管理运行完成后即可终止的应用，例如批量处理作业任务。</p><p><code>Volume：</code>PV PVC</p><p><code>ConfigMap：</code></p><p><code>Secret：</code></p><p><code>Role：</code></p><p><code>ClusterRole：</code></p><p><code>RoleBinding：</code></p><p><code>ClusterRoleBinding：</code></p><p><code>Service account：</code></p><p><code>Helm：</code></p><h5 id="Namespace：名称空间"><a href="#Namespace：名称空间" class="headerlink" title="Namespace：名称空间"></a>Namespace：名称空间</h5><p>默认的名称空间：Default。</p><p>//查看名称空间</p><pre><code>[root@master ~]# kubectl get ns</code></pre><p>//查看名称空间详细信息</p><pre><code>[root@master ~]# kubectl describe ns default </code></pre><p>//创建名称空间</p><pre><code>[root@master ~]# kubectl create namespace bdqn</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat test-ns.yaml </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test</code></pre><p>PS：namespace资源对象仅用于资源对象的隔离，并不能隔绝不同名称空间的Pod之间的通信，那是网络策略资源的功能。</p><p>查看指定名称空间的资源可以使用–namespace 或者 -n 选项</p><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat pod.yaml </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>app    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.1.11<span class="token punctuation">:</span>5000/httpd<span class="token punctuation">:</span>v1</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat pod.yaml </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>pod  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> bdqn  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>web<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>app    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.1.11<span class="token punctuation">:</span>5000/httpd<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP       <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">90</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat svc.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>svc  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> bdqn<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>web  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><h5 id="Pod中镜像获取策略："><a href="#Pod中镜像获取策略：" class="headerlink" title="Pod中镜像获取策略："></a>Pod中镜像获取策略：</h5><p><strong>Always：</strong>镜像标签为”latest“或镜像标签不存在时，总是从指定的仓库中获取镜像。</p><p><strong>IfNotPresent</strong>：仅当本地镜像不存在时才从目标仓库中下载。</p><p><strong>Never：</strong>禁止从仓库中下载镜像，即只使用本地镜像。</p><p>PS：对于标签为”latest”或者这标签不存在，其默认镜像下载策略为”Always”，而对于其他标签的镜像，默认策略为”IfNot Present“。</p><h5 id="容器的重启策略"><a href="#容器的重启策略" class="headerlink" title="容器的重启策略"></a>容器的重启策略</h5><p><strong>Always：</strong>但凡Pod对象终止就将其重启，此为默认设定。</p><p><strong>OnFailure：</strong>仅在Pod对象出现错误时才将其重启。</p><p><strong>Never：</strong>从不重启。</p><h5 id="Pod的默认健康检查"><a href="#Pod的默认健康检查" class="headerlink" title="Pod的默认健康检查"></a>Pod的默认健康检查</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat healthcheck.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">test</span><span class="token punctuation">:</span> healcheck  <span class="token key atrule">name</span><span class="token punctuation">:</span> healcheck<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> OnFailure  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> healthcheck    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">args</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /bin/sh    <span class="token punctuation">-</span> <span class="token punctuation">-</span>c    <span class="token punctuation">-</span> sleep 20; exit 1<span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod -w</span></code></pre><h5 id="Pod的默认健康检查-1"><a href="#Pod的默认健康检查-1" class="headerlink" title="Pod的默认健康检查"></a>Pod的默认健康检查</h5><p>LivenessProbe（活跃度）</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir diy</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd diy/</span><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim liveness.yaml</span><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat liveness.yaml </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">test</span><span class="token punctuation">:</span> liveness<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> OnFailure  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">args</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /bin/sh    <span class="token punctuation">-</span> <span class="token punctuation">-</span>c    <span class="token punctuation">-</span> touch /tmp/test; sleep 60; rm <span class="token punctuation">-</span>rf /tmp/test; sleep 300    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat        <span class="token punctuation">-</span> /tmp/test      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>//正确的<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">test</span><span class="token punctuation">:</span> liveness<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> OnFailure  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">args</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /bin/sh    <span class="token punctuation">-</span> <span class="token punctuation">-</span>c    <span class="token punctuation">-</span> touch /tmp/test; sleep 60; rm <span class="token punctuation">-</span>rf /tmp/test; sleep 300    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat        <span class="token punctuation">-</span> /tmp/test      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> 10   //Pod运行10秒后开始探测      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> 5     //每5秒探测一次</code></pre><p>PS：liveness活跃度探测，根据探测某个文档是否存在，来确认某个服务是否正常运行，如果存在则正常，否则，他会根据你设置的Pod的重启策略操作Pod。</p><h5 id="Readiness（敏捷探测、就绪性探测）"><a href="#Readiness（敏捷探测、就绪性探测）" class="headerlink" title="Readiness（敏捷探测、就绪性探测）"></a>Readiness（敏捷探测、就绪性探测）</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp liveness.yaml readiness.yaml</span><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim readiness.yaml </span><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat readiness.yaml </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> readiness  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">test</span><span class="token punctuation">:</span> readiness<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> OnFailure  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> readiness    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">args</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /bin/sh    <span class="token punctuation">-</span> <span class="token punctuation">-</span>c    <span class="token punctuation">-</span> touch /tmp/test; sleep 60; rm <span class="token punctuation">-</span>rf /tmp/test; sleep 300    <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat        <span class="token punctuation">-</span> /tmp/test      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><p>PS：总结liveness和readiness探测</p><p>1）liveness和readiness是两种健康检查机制，如果不特意配置，k8s将两种探测采取相同的默认行为，即通过判断容器启动进程的返回值是否为零，来判断探测是否成功。</p><p>2）两种探测配置方法完全一样，不同之处在于探测失败后的行为：</p><p>​        liveness探测是根据Pod重启策略操作容器，大多数是重启容器。</p><p>​        readiness则是将容器设置为不可用，不接收service转发的请求。</p><p>3）两种探测方法可以独立存在，也可以同时使用。用liveness判断容器是否需要重启，实现自愈；用readiness判断容器是否以及准备好对外提供服务。</p><h5 id="健康检测的应用"><a href="#健康检测的应用" class="headerlink" title="健康检测的应用"></a>健康检测的应用</h5><p>是在scale中的应用</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat hcscal.yaml </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> web<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>     <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> web    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> web        <span class="token key atrule">image</span><span class="token punctuation">:</span> httpd        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP            <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthy            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>svc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">run</span><span class="token punctuation">:</span> web  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">90</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30321</span></code></pre><h5 id="在更新过程中的使用"><a href="#在更新过程中的使用" class="headerlink" title="在更新过程中的使用"></a>在更新过程中的使用</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master diy<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat app.v1.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> app        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox        <span class="token key atrule">args</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /bin/sh        <span class="token punctuation">-</span> <span class="token punctuation">-</span>c        <span class="token punctuation">-</span> sleep 10; touch /tmp/healthy; sleep 30000        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> cat            <span class="token punctuation">-</span> /tmp/healthy          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> <span class="token number">2 </span>      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span>   <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> app        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox        <span class="token key atrule">args</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /bin/sh        <span class="token punctuation">-</span> <span class="token punctuation">-</span>c        <span class="token punctuation">-</span> sleep 3000        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> cat            <span class="token punctuation">-</span> /tmp/healthy          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><p><strong>maxSurge:</strong> 此参数控制滚动更新过程中，副本总数超过预期数的值。可以是整数，也可以是百分比，默认是1<br><strong>maxUnavailable:</strong> 不可用Pod的值。默认为1，可以是整数，也可以是百分比。</p>]]></content>
      
      
      <categories>
          
          <category> 资源对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helm入门</title>
      <link href="/2020/03/21/k8s-helm-ru-men/"/>
      <url>/2020/03/21/k8s-helm-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="Helm"><a href="#Helm" class="headerlink" title="Helm"></a>Helm</h3><pre><code>[root@master helm]# wget https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz[root@master helm]# lshelm-v2.14.3-linux-amd64.tar.gz[root@master helm]# tar -zxvf helm-v2.14.3-linux-amd64.tar.gz linux-amd64/linux-amd64/helmlinux-amd64/README.mdlinux-amd64/LICENSElinux-amd64/tiller[root@master helm]# lshelm-v2.14.3-linux-amd64.tar.gz  linux-amd64[root@master helm]# mv linux-amd64/helm /usr/local/bin/[root@master helm]# chmod +x /usr/local/bin/helm [root@master helm]# helm help[root@master helm]# source &lt;(helm completion bash)//将yaml文件导入[root@master helm]# kubectl apply -f tiller-rbac.yaml serviceaccount/tiller createdclusterrolebinding.rbac.authorization.k8s.io/tiller created//初始化[root@master helm]# helm init --service-account=tiller//添加国内heml仓库源[root@master helm]# helm repo list NAME      URL                                             stable    https://kubernetes-charts.storage.googleapis.comlocal     http://127.0.0.1:8879/charts  [root@master helm]# helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts&quot;stable&quot; has been added to your repositories[root@master helm]# helm repo list NAME      URL                                                   stable    https://kubernetes.oss-cn-hangzhou.aliyuncs.com/chartslocal     http://127.0.0.1:8879/charts  [root@master helm]# helm version Client: &amp;version.Version&amp;#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&amp;#125;Server: &amp;version.Version&amp;#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&amp;#125;</code></pre><h5 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h5><p>包管理工具：</p><p>Charts：是一个helm的程序包，它包含了运行一个kubernetes应用程序所需要的镜像，依赖关系和资源定义等。</p><p>Release：应用程序运行Charts字后，得到的一个实例。</p><pre><code>//搜索包[root@master helm]# helm search //搜索指定包[root@master helm]# helm search redis//查看包的详细信息[root@master helm]# helm inspect stable/redis//部署一个实例，[root@master helm]# helm install stable/redis -n redis --dry-runNAME:   redis    1、关于这个release的描述。    2、关于这个release资源的描述。    3、怎么使用这个release。</code></pre><h3 id="helm部署安装一个Mysql服务"><a href="#helm部署安装一个Mysql服务" class="headerlink" title="helm部署安装一个Mysql服务"></a>helm部署安装一个Mysql服务</h3><p>Chart.yaml</p><p>这个chart包的概要信息</p><p>name和version这俩是必填项，其他可选。</p><pre><code>[root@master mysql]# pwd/root/.helm/cache/archive/mysql[root@master archive]# helm install stable/mysql -n mysql[root@master archive]# lsmysql-0.3.5.tgz  redis  redis-1.1.15.tgz[root@master archive]# tar -zxvf mysql-0.3.5.tgz </code></pre><h5 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h5><p>是这个chart包的一个使用帮助文档</p><h5 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h5><p>chart包内各种资源对象的模板。</p><h5 id="values-yaml"><a href="#values-yaml" class="headerlink" title="values.yaml"></a>values.yaml</h5><p>是这个chart包的默认值，可以</p><h3 id="helm部署安装一个mysql服务"><a href="#helm部署安装一个mysql服务" class="headerlink" title="helm部署安装一个mysql服务"></a>helm部署安装一个mysql服务</h3><p>在部署mysql的时候，如何开启storageclass以及如何使用？</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum -y install rpcbind nfs-utils</span><span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /data</span><span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/exports</span><span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/exports</span>/data    *(rw<span class="token punctuation">,</span>sync<span class="token punctuation">,</span>no_root_squash)<span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start rpcbind</span><span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start nfs-server.service </span><span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># showmount -e </span>Export list for master<span class="token punctuation">:</span>/data *<span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/exports</span>/data    *(rw<span class="token punctuation">,</span>sync<span class="token punctuation">,</span>no_root_squash)<span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat nfs-pv1.yml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqlpv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 8Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Recycle  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /data/mysqlpv    <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.1.11<span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /data/mysqlpv</span><span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl apply -f nfs-pv1.yml </span>persistentvolume/mysqlpv created<span class="token punctuation">[</span>root@master archive<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pv</span>NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGEmysqlpv   8Gi        RWO            Recycle          Available                                   2s<span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># helm install stable/mysql -n bdqn-mysql  --set mysqlRootPassword=123.com</span><span class="token key atrule">NAME</span><span class="token punctuation">:</span>   bdqn<span class="token punctuation">-</span>mysql<span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get deployments.</span>NAME               READY   UP<span class="token punctuation">-</span>TO<span class="token punctuation">-</span>DATE   AVAILABLE   AGEbdqn<span class="token punctuation">-</span>mysql<span class="token punctuation">-</span>mysql   1/1     1            1           48s<span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod</span><span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod </span><span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pv</span><span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl exec -it bdqn-mysql-mysql-7b89c7b99-f65x9 -- mysql -u root -p123.com</span></code></pre><p>服务的升级：</p><pre><code>[root@master mysql]# helm upgrade --set imageTag=5.7.15 bdqn-mysql stable/mysql</code></pre><p>服务的回滚：</p><pre><code>//查看历史版本[root@master mysql]# helm history bdqn-mysql//指定回滚版本[root@master mysql]# helm rollback bdqn-mysql 1</code></pre>]]></content>
      
      
      <categories>
          
          <category> helm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>doshboard</title>
      <link href="/2020/03/21/k8s-doshboard/"/>
      <url>/2020/03/21/k8s-doshboard/</url>
      
        <content type="html"><![CDATA[<h3 id="一、k8s的UI访问界面-dashboard"><a href="#一、k8s的UI访问界面-dashboard" class="headerlink" title="一、k8s的UI访问界面-dashboard"></a>一、k8s的UI访问界面-dashboard</h3><p>在dashboard中，虽然可以做到创建，删除，修改资源等操作，但通常情况下，我们会把它当作健康k8s集群的软件。</p><p>1、到github上搜索dashboard</p><h5 id="基于token的方法登录dashboard"><a href="#基于token的方法登录dashboard" class="headerlink" title="基于token的方法登录dashboard"></a>基于token的方法登录dashboard</h5><p>1、创建一个dashboard的管理用户。</p><pre><code>[root@master dashboard]# kubectl create serviceaccount dashboard-admin -n kube-systemserviceaccount/dashboard-admin created</code></pre><p>2、绑定用户为集群管理用户。</p><pre><code>[root@master dashboard]# kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-adminclusterrolebinding.rbac.authorization.k8s.io/dashboard-cluster-admin created</code></pre><p>3、获取token</p><pre><code>//得到token的名称[root@master dashboard]# kubectl get secrets -n kube-system | grep dashboard-admin            dashboard-admin-token-kz6tw                      kubernetes.io/service-account-token   3      5m8s[root@master dashboard]# kubectl get secrets -n kube-system dashboard-admin-token-kz6tw NAME                          TYPE                                  DATA   AGEdashboard-admin-token-kz6tw   kubernetes.io/service-account-token   3      7m10s//查看上述得到的secret资源的详细信息，会得到token[root@master dashboard]# kubectl describe secrets -n kube-system dashboard-admin-token-kz6tw   </code></pre><p><img src="C:\Users\12165\AppData\Roaming\Typora\typora-user-images\image-20200226090425791.png" alt="image-20200226090425791"></p><p>4、在浏览器上使用token登录</p><p>PS：如果使用的旧版本的dashboard，使用谷歌浏览器登陆可能是不成功的，需要换成其他浏览器，比如火狐</p><h5 id="基于kubeconfig配置文件登录kubernetes"><a href="#基于kubeconfig配置文件登录kubernetes" class="headerlink" title="基于kubeconfig配置文件登录kubernetes"></a>基于kubeconfig配置文件登录kubernetes</h5><p>1、获取token</p><pre><code>//得到token的名称[root@master dashboard]# kubectl get secrets -n kube-system | grep dashboard-admin            dashboard-admin-token-kz6tw                      kubernetes.io/service-account-token   3      5m8s[root@master dashboard]# kubectl get secrets -n kube-system dashboard-admin-token-kz6tw NAME                          TYPE                                  DATA   AGEdashboard-admin-token-kz6tw   kubernetes.io/service-account-token   3      7m10s//查看上述得到的secret资源的详细信息，会得到token[root@master dashboard]# kubectl describe secrets -n kube-system dashboard-admin-token-kz6tw </code></pre><p>2、生成kubeconfi配置文件</p><pre><code>//设置一个环境变量代表获取到的token[root@master dashboard]# kubectl get secrets -n kube-system dashboard-admin-token-kz6tw -o jsonpath=&amp;#123;.data.token&amp;#125; | base64 -d[root@master dashboard]# DASH_TOKEN=$(kubectl get secrets -n kube-system dashboard-admin-token-kz6tw -o jsonpath=&amp;#123;.data.token&amp;#125; | base64 -d)//将k8s集群的配置信息写入[root@master dashboard]# kubectl config set-cluster kubernetes --server=192.168.1.11:6443  --kubeconfig=/root/.dashboard-admin.conf[root@master dashboard]# kubectl config set-credentials dashboard-admin --token=$DASH_TOKEN --kubeconfig=/root/.dashboard-admin.conf[root@master dashboard]# kubectl config set-context dashboard-admin@kubernetes --cluster=kubernetes --user=dashboard-admin --kubeconfig=/root/.dashboard-admin.conf[root@master dashboard]# kubectl config use-context dashboard-admin@kubernetes --kubeconfig=/root/.dashboard-admin.conf</code></pre><p>3、将生成的/root/.dashboard-admin.conf的配置文件，导出并做保存。</p><p>4、从浏览器选择kubeconfig的登录方式，</p>]]></content>
      
      
      <categories>
          
          <category> doshboard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s集群 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
